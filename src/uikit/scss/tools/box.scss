@import "../color";
@import "../borders";
@import "../tools/hover";
@import "../tools/transition";
@import "../tools/functions";

@mixin make-button-like($options) {

    background-color: get-value(map_get($options, 'background-color'), unset);
    border-color: get-value(map_get($options, 'border-color'), black);
    color: get-value(map_get($options, 'text-color'), black);

    @include hover-focus-active() {
        background-color: get-value(map_get($options, 'hover-background-color'), 'unset');
        border-color: get-value(map_get($options, 'hover-border-color'), black);
        color: get-value(map_get($options, 'hover-text-color-color'), black);
    }

    @include focus-active() {
        box-shadow: 0 0 0 get-value(map_get($options, 'outline-width'), 1px) get-value(map_get($options, 'outline-color'), black);
    }

    @include generate-colors();
    @extend .border-1;
    @extend .border-radius-2;

    @include hover-focus-active() {
        @include transition(all);
    }

    @include transition(all);
}

@mixin make-button-like-sizes($selector: null) {
    @each $key, $size in $button-like-sizes {
        @if ($selector == null) {
            &.size-#{$key} {
                padding: $size !important;
            }
        } @else {
            &.size-#{$key} #{$selector} {
                padding: $size !important;
            }
        }
    }
}

@mixin make-checkbox-like-sizes($selector: null) {
    @each $key, $size in $checkbox-like-sizes {
        @if ($selector == null) {
            &.size-#{$key} {
                padding: $size !important;
            }
        } @else {
            &.size-#{$key} #{$selector} {
                padding: $size !important;
            }
        }
    }
}
